version: 2.0

build_jobs: &build_jobs
  jobs:
    - build-amd64
    - build-arm64
    - build-armhf
    - push-manifest:
        requires:
          - build-amd64
          - build-arm64
          - build-armhf

workflows:
  version: 2
    <<: *build_jobs

shared: &shared
  docker:
    - image: docker:18-git
  steps:
    - checkout

    - setup_remote_docker:
        docker_layer_caching: true

    - run:
        name: Install build dependencies.
        command: apk add --no-cache bash curl git jq make perl

    - run:
        name: Add dynamic shared vars to env.
        command: |
          echo 'export VERSION=$(curl -s https://api.github.com/repos/${GITHUB_REPO}/releases/latest | jq -r ".tag_name")' >> $BASH_ENV
          echo 'export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"' >> $BASH_ENV
          echo 'export DIR=`pwd`' >> $BASH_ENV
          source $BASH_ENV
    - run:
        name: Build and push Docker image.
        command: |
          source $BASH_ENV
          export IMAGE_ID="${REGISTRY}/${IMAGE}:${VERSION}-${TAG}"
          cd $GOPATH/src/github.com/${GITHUB_REPO}
          # ============
          # <qemu-support>
          if [ $GOARCH == 'amd64' ]; then
            touch qemu-amd64-static
          else
            curl -sL "https://github.com/multiarch/qemu-user-static/releases/download/${QEMU_VERSION}/qemu-${QEMU_ARCH}-static.tar.gz" | tar xz
            docker run --rm --privileged multiarch/qemu-user-static:register
          fi
          # </qemu-support>
          # ============

          # Replace the repo's Dockerfile with our own.
          cp -f $DIR/Dockerfile .
          docker build -t ${IMAGE_ID} --build-arg target=$TARGET --build-arg arch=$QEMU_ARCH .
          # Login to Docker Hub.
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
          # Push push push
          docker push ${IMAGE_ID}
          if [ $CIRCLE_BRANCH == 'master' ]; then
            docker tag "${IMAGE_ID}" "${REGISTRY}/${IMAGE}:latest-${TAG}"
            docker push "${REGISTRY}/${IMAGE}:latest-${TAG}"
          fi

jobs:
  build-amd64:
    <<: *shared
    environment:
      GITHUB_REPO: minio/minio
      IMAGE: go
      REGISTRY: dabsquared
      TAG: amd64
      TARGET: amd64
      QEMU_ARCH: amd64
  build-arm64:
    <<: *shared
    environment:
      GITHUB_REPO: minio/minio
      IMAGE: go
      REGISTRY: dabsquared
      QEMU_ARCH: aarch64
      QEMU_VERSION: v2.11.0
      TAG: arm64
      TARGET: arm64v8
  build-armhf:
    <<: *shared
    environment:
      GITHUB_REPO: minio/minio
      IMAGE: go
      REGISTRY: dabsquared
      QEMU_ARCH: arm
      QEMU_VERSION: v2.11.0
      TAG: arm
      TARGET: arm32v6
  push-manifest:
    docker:
      - image: docker:18
    environment:
      GITHUB_REPO: dabsquared/go
      IMAGE: go
      REGISTRY: dabsquared
    steps:
      - setup_remote_docker

      - run:
          name: Install manifest-tool.
          command: |
            echo "Downloading manifest-tool."
            wget https://github.com/estesp/manifest-tool/releases/download/v0.9.0/manifest-tool-linux-amd64
            mv manifest-tool-linux-amd64 /usr/bin/manifest-tool
            chmod +x /usr/bin/manifest-tool
            manifest-tool --version
      - run:
          name: Push Docker manifest.
          command: |
            export VERSION=$(cat ~/VERSION)
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
#            manifest-tool push from-args \
#              --platforms linux/amd64,linux/arm,linux/arm64 \
#              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
#              --target "$REGISTRY/$IMAGE:latest"
#      - run:
#          name: Verify manifest was persisted remotely.
#          command: |
#            export VERSION=$(cat ~/VERSION)
#            manifest-tool inspect "$REGISTRY/$IMAGE:$VERSION"

